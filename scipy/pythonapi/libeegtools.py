# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _libeegtools
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libeegtools.new_intArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libeegtools.delete_intArray
    __del__ = lambda self : None;
    def __getitem__(*args): return _libeegtools.intArray___getitem__(*args)
    def __setitem__(*args): return _libeegtools.intArray___setitem__(*args)
    def cast(*args): return _libeegtools.intArray_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _libeegtools.intArray_frompointer
    if _newclass:frompointer = staticmethod(_libeegtools.intArray_frompointer)
intArray_swigregister = _libeegtools.intArray_swigregister
intArray_swigregister(intArray)
intArray_frompointer = _libeegtools.intArray_frompointer

class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libeegtools.new_doubleArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libeegtools.delete_doubleArray
    __del__ = lambda self : None;
    def __getitem__(*args): return _libeegtools.doubleArray___getitem__(*args)
    def __setitem__(*args): return _libeegtools.doubleArray___setitem__(*args)
    def cast(*args): return _libeegtools.doubleArray_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _libeegtools.doubleArray_frompointer
    if _newclass:frompointer = staticmethod(_libeegtools.doubleArray_frompointer)
doubleArray_swigregister = _libeegtools.doubleArray_swigregister
doubleArray_swigregister(doubleArray)
doubleArray_frompointer = _libeegtools.doubleArray_frompointer

mad = _libeegtools.mad
sgn = _libeegtools.sgn
maxel = _libeegtools.maxel
maxeli = _libeegtools.maxeli
closest_index = _libeegtools.closest_index
sampled_line = _libeegtools.sampled_line
lininterp = _libeegtools.lininterp
linspace = _libeegtools.linspace
bresenham_howmany_points = _libeegtools.bresenham_howmany_points
bresenham = _libeegtools.bresenham
gaussian = _libeegtools.gaussian
disttransform_deadreckoning = _libeegtools.disttransform_deadreckoning
next_pow2 = _libeegtools.next_pow2
iremainder = _libeegtools.iremainder
expand_polynomial_from_roots = _libeegtools.expand_polynomial_from_roots
fft = _libeegtools.fft
drawsample_nearest_neighbour = _libeegtools.drawsample_nearest_neighbour
resample_linear = _libeegtools.resample_linear
resample_nearest_neighbour = _libeegtools.resample_nearest_neighbour
resample_gsl = _libeegtools.resample_gsl
rmse = _libeegtools.rmse
snr = _libeegtools.snr
vector_min = _libeegtools.vector_min
vector_init = _libeegtools.vector_init
vector_minus_scalar = _libeegtools.vector_minus_scalar
vector_complex_to_real = _libeegtools.vector_complex_to_real
vector_euclidean_distance = _libeegtools.vector_euclidean_distance
vector_shuffle_int = _libeegtools.vector_shuffle_int
matrix_delrow = _libeegtools.matrix_delrow
matrix_delcol = _libeegtools.matrix_delcol
matrix_min = _libeegtools.matrix_min
matrix_max = _libeegtools.matrix_max
matrix_print = _libeegtools.matrix_print
matrix_init = _libeegtools.matrix_init
matrix_init_int = _libeegtools.matrix_init_int
matrix_divide_scalar = _libeegtools.matrix_divide_scalar
matrix_add_scalar = _libeegtools.matrix_add_scalar
matrix_mul_scalar = _libeegtools.matrix_mul_scalar
matrix_normalize_by_max = _libeegtools.matrix_normalize_by_max
matrix_add_matrix = _libeegtools.matrix_add_matrix
matrix_dottimes_matrix = _libeegtools.matrix_dottimes_matrix
matrix_copy = _libeegtools.matrix_copy
scalar_minus_matrix = _libeegtools.scalar_minus_matrix
matrix_rand = _libeegtools.matrix_rand
matrix_free = _libeegtools.matrix_free
class EEGdata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EEGdata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EEGdata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nbchan"] = _libeegtools.EEGdata_nbchan_set
    __swig_getmethods__["nbchan"] = _libeegtools.EEGdata_nbchan_get
    if _newclass:nbchan = _swig_property(_libeegtools.EEGdata_nbchan_get, _libeegtools.EEGdata_nbchan_set)
    __swig_setmethods__["n"] = _libeegtools.EEGdata_n_set
    __swig_getmethods__["n"] = _libeegtools.EEGdata_n_get
    if _newclass:n = _swig_property(_libeegtools.EEGdata_n_get, _libeegtools.EEGdata_n_set)
    __swig_setmethods__["d"] = _libeegtools.EEGdata_d_set
    __swig_getmethods__["d"] = _libeegtools.EEGdata_d_get
    if _newclass:d = _swig_property(_libeegtools.EEGdata_d_get, _libeegtools.EEGdata_d_set)
    __swig_setmethods__["markers"] = _libeegtools.EEGdata_markers_set
    __swig_getmethods__["markers"] = _libeegtools.EEGdata_markers_get
    if _newclass:markers = _swig_property(_libeegtools.EEGdata_markers_get, _libeegtools.EEGdata_markers_set)
    __swig_setmethods__["nmarkers"] = _libeegtools.EEGdata_nmarkers_set
    __swig_getmethods__["nmarkers"] = _libeegtools.EEGdata_nmarkers_get
    if _newclass:nmarkers = _swig_property(_libeegtools.EEGdata_nmarkers_get, _libeegtools.EEGdata_nmarkers_set)
    def __init__(self, *args): 
        this = _libeegtools.new_EEGdata(*args)
        try: self.this.append(this)
        except: self.this = this
    def reset(*args): return _libeegtools.EEGdata_reset(*args)
    def clone(*args): return _libeegtools.EEGdata_clone(*args)
    def get_chan(*args): return _libeegtools.EEGdata_get_chan(*args)
    def get_data(*args): return _libeegtools.EEGdata_get_data(*args)
    def __str__(*args): return _libeegtools.EEGdata___str__(*args)
    __swig_destroy__ = _libeegtools.delete_EEGdata
    __del__ = lambda self : None;
EEGdata_swigregister = _libeegtools.EEGdata_swigregister
EEGdata_swigregister(EEGdata)

class EEGdata_trials(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EEGdata_trials, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EEGdata_trials, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _libeegtools.EEGdata_trials_data_set
    __swig_getmethods__["data"] = _libeegtools.EEGdata_trials_data_get
    if _newclass:data = _swig_property(_libeegtools.EEGdata_trials_data_get, _libeegtools.EEGdata_trials_data_set)
    __swig_setmethods__["ntrials"] = _libeegtools.EEGdata_trials_ntrials_set
    __swig_getmethods__["ntrials"] = _libeegtools.EEGdata_trials_ntrials_get
    if _newclass:ntrials = _swig_property(_libeegtools.EEGdata_trials_ntrials_get, _libeegtools.EEGdata_trials_ntrials_set)
    __swig_setmethods__["nmarkers_per_trial"] = _libeegtools.EEGdata_trials_nmarkers_per_trial_set
    __swig_getmethods__["nmarkers_per_trial"] = _libeegtools.EEGdata_trials_nmarkers_per_trial_get
    if _newclass:nmarkers_per_trial = _swig_property(_libeegtools.EEGdata_trials_nmarkers_per_trial_get, _libeegtools.EEGdata_trials_nmarkers_per_trial_set)
    __swig_setmethods__["markers"] = _libeegtools.EEGdata_trials_markers_set
    __swig_getmethods__["markers"] = _libeegtools.EEGdata_trials_markers_get
    if _newclass:markers = _swig_property(_libeegtools.EEGdata_trials_markers_get, _libeegtools.EEGdata_trials_markers_set)
    __swig_setmethods__["nsamples"] = _libeegtools.EEGdata_trials_nsamples_set
    __swig_getmethods__["nsamples"] = _libeegtools.EEGdata_trials_nsamples_get
    if _newclass:nsamples = _swig_property(_libeegtools.EEGdata_trials_nsamples_get, _libeegtools.EEGdata_trials_nsamples_set)
    __swig_setmethods__["times"] = _libeegtools.EEGdata_trials_times_set
    __swig_getmethods__["times"] = _libeegtools.EEGdata_trials_times_get
    if _newclass:times = _swig_property(_libeegtools.EEGdata_trials_times_get, _libeegtools.EEGdata_trials_times_set)
    __swig_setmethods__["sampling_rate"] = _libeegtools.EEGdata_trials_sampling_rate_set
    __swig_getmethods__["sampling_rate"] = _libeegtools.EEGdata_trials_sampling_rate_get
    if _newclass:sampling_rate = _swig_property(_libeegtools.EEGdata_trials_sampling_rate_get, _libeegtools.EEGdata_trials_sampling_rate_set)
    def __init__(self, *args): 
        this = _libeegtools.new_EEGdata_trials(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _libeegtools.EEGdata_trials_clone(*args)
    def get_trial(*args): return _libeegtools.EEGdata_trials_get_trial(*args)
    def get_times(*args): return _libeegtools.EEGdata_trials_get_times(*args)
    def __str__(*args): return _libeegtools.EEGdata_trials___str__(*args)
    __swig_destroy__ = _libeegtools.delete_EEGdata_trials
    __del__ = lambda self : None;
EEGdata_trials_swigregister = _libeegtools.EEGdata_trials_swigregister
EEGdata_trials_swigregister(EEGdata_trials)

init_eegdata = _libeegtools.init_eegdata
reset_eegdata = _libeegtools.reset_eegdata
init_eegdata_trials = _libeegtools.init_eegdata_trials
free_eegdata = _libeegtools.free_eegdata
free_eegdata_trials = _libeegtools.free_eegdata_trials
eegdata_cmp_settings = _libeegtools.eegdata_cmp_settings
clone_eegdata_trials = _libeegtools.clone_eegdata_trials
clone_eegdata = _libeegtools.clone_eegdata
read_eegtrials_from_raw = _libeegtools.read_eegtrials_from_raw
write_eegtrials_to_raw_file = _libeegtools.write_eegtrials_to_raw_file
running_median = _libeegtools.running_median
moving_average = _libeegtools.moving_average
eeg_filter_running_median = _libeegtools.eeg_filter_running_median
eeg_filter_fidlib = _libeegtools.eeg_filter_fidlib
eeg_wavelet_denoise = _libeegtools.eeg_wavelet_denoise
extend_and_denoise = _libeegtools.extend_and_denoise
translation_invariant_thresholding_cb = _libeegtools.translation_invariant_thresholding_cb
translation_invariant_thresholding = _libeegtools.translation_invariant_thresholding
conventional_thresholding_cb = _libeegtools.conventional_thresholding_cb
conventional_thresholding = _libeegtools.conventional_thresholding
sureshrink_cb = _libeegtools.sureshrink_cb
sureshrink = _libeegtools.sureshrink
heuristic_sure_cb = _libeegtools.heuristic_sure_cb
heuristic_sure = _libeegtools.heuristic_sure
eta_s_cb = _libeegtools.eta_s_cb
eta_s = _libeegtools.eta_s
eta_h_cb = _libeegtools.eta_h_cb
eta_h = _libeegtools.eta_h
sigext_zeros_cb = _libeegtools.sigext_zeros_cb
sigext_zeros = _libeegtools.sigext_zeros
sigext_zerosr_cb = _libeegtools.sigext_zerosr_cb
sigext_zerosr = _libeegtools.sigext_zerosr
sigext_sym_cb = _libeegtools.sigext_sym_cb
sigext_sym = _libeegtools.sigext_sym
sigext_smooth_cb = _libeegtools.sigext_smooth_cb
sigext_smooth = _libeegtools.sigext_smooth
def wavelet_denoising(eeg, L=4, thresholdselection=heuristic_sure_cb,
                      thresholdfct=eta_s_cb, signalextension=sigext_sym_cb,
                      trials=None):
    if type(eeg).__name__=='EEGdata':
        print "This is an EEGdata struct";
        neweeg = eeg.clone();
        eeg_wavelet_denoise( neweeg, L, thresholdselection, thresholdfct, signalextension );
        return neweeg
    elif type(eeg).__name__=="EEGdata_trials":
        print "This is an EEGdata_trials struct"
        if not trials:
            trials = range(0,eeg.ntrials);
        neweeg = eeg.clone();
        for i in trials:
            x=neweeg.get_trial(i);
            eeg_wavelet_denoise( x, L, thresholdselection, thresholdfct, signalextension );
        return neweeg
    else:
        print "Plotting does not support '%s'"%(type(eeg).__name__)


import pylab
import math


def plot_eegdata(eeg, plotfilename=None, times=None, channels=None, format="b-"):
    """
    """
    if not channels:
        channels = range(0,eeg.nbchan);
    d = eeg.get_data();
    nc = int(math.ceil(math.sqrt( len(channels) )));
    idx = 1;
    for c in channels:
        pylab.subplot(nc,nc,idx);
        if times:
            pylab.plot(times, d[c], format);
        else:
            pylab.plot(d[c], format);
        pylab.title("Channel %i"%c);
        idx = idx+1;
    if( plotfilename ):
        pylab.savefig( plotfilename );

def plot_eeg(eeg, plotfilename=None, times=None, channels=None, trials=None, format="b-"):
    """
    plotting for EEGdata and EEGdata_trials.
    pylab based.
    """
    if type(eeg).__name__=='EEGdata':
        print "This is an EEGdata struct";
        plot_eegdata( eeg, plotfilename=plotfilename,
                      times=times, channels=channels, format=format );
    elif type(eeg).__name__=="EEGdata_trials":
        print "This is an EEGdata_trials struct"
        
    else:
        print "Plotting does not support '%s'"%(type(eeg).__name__)


        



