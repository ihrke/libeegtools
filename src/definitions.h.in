/** \file definitions.h
	 \brief Definitions for libeegtools.
 */
#ifndef DEFINITIONS_H
#define DEFINITIONS_H

/* replaced by autoconf */
#define @DEF_DEBUG@

#define ALLOC_IN_FCT NULL
#define MAX_LABEL_LENGTH 40


#define PROGRESSBAR_NUMCOLS        80 /**< number of columns for progress bar */
#define PROGRESSBAR_INIT           0  /**< initialize flag for progress bar   */
#define PROGRESSBAR_CONTINUE_SHORT 1  /**< continue flag for progress bar, minor step */
#define PROGRESSBAR_CONTINUE_LONG  2  /**< continue flag for progress bar, major step */
#define PROGRESSBAR_FINISH         3  /**< cleanup */
#ifdef __cplusplus
extern "C" {
#endif

  /*-----------------------------------------------------------
	 - EEG-Data -
	 ---------------------------------------------------------*/

  typedef struct{
	 unsigned int nbchan;    /**< number of channels */
	 unsigned int n;         /**< number of samples */
	 double **d;             /**< data */
	 unsigned long *markers; /**< stimulus onset, response, etc
										 in sampling points; nmarkers long */
	 unsigned int nmarkers;
  } EEGdata;

  typedef struct{
	 EEGdata **data;          /**< EEG-data for all  trials (n EEGdata-struct-ptr) */
	 unsigned int ntrials;    /**< number of trials = dim(eeg) */  
	 unsigned int nmarkers_per_trial;
	 unsigned long **markers; /**< stimulus onset, response, etc
											in sampling points; dims are ntrials x nmarkers */
	 unsigned int nsamples;   /**< number of samples in each data */
	 double *times;           /**< times array; data->n long */
	 double sampling_rate;    /**< in Hz */
  } EEGdata_trials;


  /*-----------------------------------------------------------
	 - Progress Bar
	 ---------------------------------------------------------*/
  typedef struct{
	 int max_progress;
	 int cur_progress;
	 int prev_progress;
  } ProgressBarStatus;

  /*-----------------------------------------------------------
	 - Nonlinear embedding -
	 ---------------------------------------------------------*/

  typedef struct {
	 int m;     /**< embedding dimension */
	 int tau;   /**< time-lag for embedding (>0, multiple of sampling_step) */
	 double *x; /**< pointer to data */
	 int xn;    /**< len(x) */
  } PhaseSpace;

  /*-----------------------------------------------------------
	 - Recurrence Plots - 
	 ---------------------------------------------------------*/

  /** Struct for representing recurrence or cross-recurrence plots.
		For recurrence plot, m=n.
		
		Depending on the settings of the struct, epsilon is fixed 
		or \f$ \epsilon = \epsilon(i)\f$ is chosen for each point on the 
		trajectory, such that there is a fixed amount of Neighbours. 
	*/
  typedef struct {
	 double **R;      /**< recurrence plot */
	 int m;           /**< first dim */
	 int n;           /**< second dim */
	 double fixed_epsilon;
	 double *epsilon; /**< ball in which neighbours are looked for */
	 int nepsilon;    /**< len(epsilon) */
	 int fan;         /**< fixed-amount of neighbours */
  } RecurrencePlot;


  /*-----------------------------------------------------------
	 - EEG-CHANNELS -
	 ---------------------------------------------------------*/

  typedef struct{
	 int    num;
	 int    num_chans;
	 char   label[MAX_LABEL_LENGTH];
	 double x;
	 double y;
	 double z;
  } ChannelInfo;


  
  /*-----------------------------------------------------------
	 - CLUSTERING -
	 ---------------------------------------------------------*/

  /**\ingroup clustering
	\{ */
  typedef struct{
	 int **clust; /** indices for the trials in the cluster (Kxn)*/
	 int K;       /** number of clusters */
	 int *n;      /** number of trials in each of the K clusters */
  } Clusters;


  /** This struct is the representation of a rooted binary tree to
	  hold a dendrogram. 
	  It is a terminal node if val>0 and left=right=NULL.
	  Else it is an intermediate node that has at least one child!=NULL.
	*/
   struct dgram {
	 int val;            /** content representing object val; if val<0, its an intermediate node */
	 double height;      /** proportional to between sub-cluster distance */
	 struct dgram *left;
	 struct dgram *right;
  };
  typedef struct dgram Dendrogram;
  /** \} */

  /** \ingroup gap */
  typedef struct {
	 int K;            /**< maximum number of clusters */
	 int B;            /**< Monte-Carlo repetition of reference distr. calc. */
	 double *gapdistr; /**< final Gap-Statistic Distribution */
	 double *sk;       /**< modified standard deviation for gapdistr */
	 double *Wk;       /**< within scatter for data */
	 double **Wkref;   /**< within scatter for reference-dist */
	 int khat;         /**> best number of clusters */
  } GapStatistic;

  /*-----------------------------------------------------------
	 - WARPING -
	 ---------------------------------------------------------*/

  typedef struct{
	 int *t1; /**< time-scale of first signal */
	 int *t2; /**< time-scale of second signal */
	 int n1; /**< length of signal 1 */
	 int n2; /**< length of signal 2 */
	 int n; /**< length(t1)==length(t2) */
  } WarpPath;
	

  /*-----------------------------------------------------------
	 - Function Pointers
	 ---------------------------------------------------------*/
  typedef double**(*RegularizationFunction)       (const EEGdata*,const EEGdata*,double,double**);
  typedef double  (*LinkageFunction)              (const double**,int,const Dendrogram*,const Dendrogram*);

  typedef double**(*EEGPointwiseDistanceFunction) (const EEGdata*,const EEGdata*,int,double**,void*);
  typedef double**(*PointwiseDistanceFunction)    (const double*,int,const double*,int,double**,void*);
  typedef double  (*VectorDistanceFunction)       (double*,double*,int,void*);
  typedef double  (*PointDistanceFunction)        (double,double);

  typedef double  (*ThresholdSelectionFunction)   (const double*,int);
  typedef double  (*ThresholdFunction)            (double,double);
  typedef double* (*SignalExtensionFunction)      (double*,int,int);

  typedef double* (*WindowFunction)               (double*,int);

  typedef void    (*ProgressBarFunction)          (int,int);

 /*-----------------------------------------------------------
	 - Hierarchical WARPING -
	 ---------------------------------------------------------*/

  typedef struct {
	 RegularizationFunction regularize; /**< regularization function; 
														at the moment only one double 
														parameter is possible */
	 double sigma; 				  /**< for regularization; maximal sigma of gaussian corridor */
	 LinkageFunction linkage; /**< linkage function 
										  for clustering; one of 
										  dgram_dist_*() */
	 int dont_touch_eeg;    /**< overwrite eeg_in or not? */
	 EEGPointwiseDistanceFunction pointdistance; /**< distance function for between
															  trials; params receives the complete
															  SettingsHierarchicalDTW struct */
	 double theta1, theta2;			  /**< for derivative timewarping metric */
	 double corner_freqs[2];	  /**< for local-frequency metric */
	 double sampling_rate;	     /**< sampling frequency of the signal */
	 WindowFunction winfct; /**< windowing function for STFT */
	 int winlength;					  /**< length of window used for STFT */
	 int N_freq;						  /**< frequency resolution of STFT */
	 int N_time;						  /**< time resolution of STFT */

	 int *channels; /**< compute PADTW only for these channels; 
							 if NULL, all channels are used */
	 int num_channels; /**< number of elements in channels */
	 ProgressBarFunction progress; /**< callback function, called every now and then.
												 The function is called with PROGRESSBAR_INIT and 
												 the max number of calls once. Then it is called
											    for a major step with PROGRESSBAR_CONTINUE_LONG
											    and the num of the step as second arg. For small
											    steps it is called with PROGRESSBAR_CONTINUE_SHORT.
											    If NULL, nothing is done. */
  } SettingsHierarchicalDTW;
  

#ifdef __cplusplus
}
#endif

#endif
