CVS reverting
-------------

http://www.inf.ed.ac.uk/systems/web/publish/cvs-revert.html


# get old version
$ cvs update -r 1.5 oldfile

... work with it...

# and maybe revert to most recent work
$ cvs up -A oldfile


/usr/lib64 problem with t_som wrapper script:
---------------------------------------------
LD_LIBRARY_PATH="./src/.libs/:$LD_LIBRARY_PATH" && ./examples/.libs/t_som ~/sloc/data/artdata1.raw


# migrating cvs from pinguin to sf.net
#
pinguin     $ tar cvfz libeegtools_repo.tar.gz /home/share/bccn/cvsroot/libeegtools/
workstation $ scp mihrke@pinguin.uni-psych.gwdg.de:/home/share/bccn/cvsroot/libeegtools_repo.tar.gz .
workstation $ scp libeegtools_repo.tar.gz mihrke@shell.sf.net:/home/users/m/mi/mihrke/.
workstation $ ssh -t mihrke,libeegtools@shell.sourceforge.net create
shell.sf.net$ adminrepo --checkout cvs
shell.sf.net$ cd /cvsroot/libeegtools
shell.sf.net$ cp /home/users/m/mi/mihrke/libeegtools_repo.tar.gz .
shell.sf.net$ tar xvfz libeegtools_repo.tar.gz
shell.sf.net$ cd ; adminrepo --save cvs


Using NAN or INF portably
-------------------------
use 0.0/0.0 for NAN
use 1.0/0.0 for INF 
etc.
check with isnan(x)


List stuff in object files:
---------------------------
nm object.o


Migration to Array-struct:
--------------------------
Done:

averaging
clustering (no gapstat)
distances
linalg
recurrence_plot
reader
writer
regularization
time_frequency
include the WAV-file reader/writer!
write a test for array_typecast!


CONTINUE WITH:
----------------
optargs.h
finish the eeglab reader (and the test!)
nonlinear !!

=======
- all EEG-functions missing!
=======
src/averaging.c:192:#ifdef FIXEEG
src/averaging.c:221:#ifdef FIXEEG
src/distances.c:273:#ifdef FIXEEG
src/eeg.c:6:#ifdef FIXEEG
src/filter.c:37:#ifdef FIXEEG
src/filter.c:122:#ifdef FIXEEG
src/filter.c:313:#ifdef FIXEEG
src/hmm.c:141:#ifdef FIXEEG
src/io_matlab.c:45:#ifdef FIXEEG
src/mpitools.c:35:#ifdef FIXEEG
src/mpitools.c:88:#ifdef FIXEEG
src/mpitools.c:195:#ifdef FIXEEG
src/nonlinear.c:178:#ifdef FIXEEG
src/tools.c:34:#ifdef FIXEEG
src/warping.c:617:#ifdef FIXEEG
src/wavelet.c:231:#ifdef FIXEEG

------------------------
Developer Configuration:
------------------------

../../configure --enable-debug --enable-unittest --enable-matlab --with-matlab-basedir=/opt/matlab/ --disable-python --prefix=`pwd`/install



-------------------------
DEBUGGING MEX-files
--------------------------

To debug with gdb,

Compile the MEX-file with the -g option, which builds the file with debugging symbols included. For this example, at the Linux prompt, type
linux> mex -g yprime.c


On a Linux 32â€“bit platform, this command creates the executable file yprime.mexglx.

At the Linux prompt, start the gdb debugger using the matlab function -D option:
linux> matlab -Dgdb



Start MATLAB without the Java virtual machine (JVM) by using the -nojvm startup flag:
<gdb> run -nojvm


In MATLAB, enable debugging with the dbmex function and run your MEX-file:
>> dbmex on
>> yprime(1,1:4)


At this point, you are ready to start debugging.

It is often convenient to set a breakpoint at mexFunction so you stop at the beginning of the gateway routine.
<gdb> break mexFunction
<gdb> continue


Once you hit one of your breakpoints, you can make full use of any commands the debugger provides to examine variables, display memory, or inspect registers.

To proceed from a breakpoint, type
<gdb> continue


After stopping at the last breakpoint, type
<gdb> continue


yprime finishes and MATLAB displays
ans =

	 2.0000    8.9685    4.0000   -1.0947



From the MATLAB prompt you can return control to the debugger by typing
>> dbmex stop


Or, if you are finished running MATLAB, type
>> quit


When you are finished with the debugger, type
<gdb> quit


You return to the Linux prompt
